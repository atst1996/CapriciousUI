<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Color x:Key="Theme.AccentColor">#07c</Color>
    <SolidColorBrush x:Key="Theme.AccentColorBrush" Color="#07c" />

    <!--#region Colors -->

    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#07c" />
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="#fff" />

    <!-- TextBox / ComboBox / Slider -->
    <SolidColorBrush x:Key="Theme.InputBox.Normal.BackgroundBrush" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Theme.InputBox.Normal.BorderBrush" Color="#FFABABAB"/>
    <SolidColorBrush x:Key="Theme.InputBox.Normal.ToggleButotn.BackgroundBrush" Color="Transparent"/>
    <SolidColorBrush x:Key="Theme.InputBox.MouseOver.BackgroundBrush" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Theme.InputBox.MouseOver.BorderBrush" Color="#FF898989"/>
    <SolidColorBrush x:Key="Theme.InputBox.MouseOver.ToggleButotn.BackgroundBrush" Color="#FFEBF4FC" />
    <SolidColorBrush x:Key="Theme.InputBox.Pressed.ToggleButotn.BackgroundBrush" Color="#FFDAEBFC" />
    <SolidColorBrush x:Key="Theme.InputBox.Focus.BackgroundBrush" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Theme.InputBox.Focus.BorderBrush" Color="#07C"/>
    <SolidColorBrush x:Key="Theme.InputBox.Error.BorderBrush" Color="#f33"/>
    <SolidColorBrush x:Key="Theme.InputBox.Disabled.BackgroundBrush" Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="Theme.InputBox.Disabled.BorderBrush" Color="#FFD9D9D9" />
    <SolidColorBrush x:Key="Theme.InputBox.Disabled.ToggleButotn.BackgroundBrush" Color="Transparent"/>
    <SolidColorBrush x:Key="Theme.ComboBox.Normal.ArrowBrush" Color="#FF606060"/>
    <SolidColorBrush x:Key="Theme.ComboBox.MouseOver.ArrowBrush" Color="#FF000000"/>
    <SolidColorBrush x:Key="Theme.ComboBox.Pressed.ArrowBrush" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="Theme.ComboBox.Disabled.ArrowBrush" Color="#FFBFBFBF"/>

    <!-- Buttons -->
    <SolidColorBrush x:Key="Theme.Button.Normal.BackgroundBrush" Color="#FFEEEEEE"/>
    <SolidColorBrush x:Key="Theme.Button.Normal.BorderBrush" Color="#FFAAAAAA"/>
    <SolidColorBrush x:Key="Theme.Button.Normal.ForegroundBrush" Color="#FF333333" />
    <SolidColorBrush x:Key="Theme.Button.MouseOver.BackgroundBrush" Color="#FFE8E8E8"/>
    <SolidColorBrush x:Key="Theme.Button.MouseOver.BorderBrush" Color="#FFA4A4A4"/>
    <SolidColorBrush x:Key="Theme.Button.Pressed.BackgroundBrush" Color="#FFBBBBBB"/>
    <SolidColorBrush x:Key="Theme.Button.Pressed.BorderBrush" Color="#FF777777"/>
    <SolidColorBrush x:Key="Theme.Button.Disabled.BackgroundBrush" Color="#FFF6F6F6"/>
    <SolidColorBrush x:Key="Theme.Button.Disabled.BorderBrush" Color="#FFB2B2B2"/>
    <SolidColorBrush x:Key="Theme.Button.Disabled.ForegroundBrush" Color="#FF969696"/>

    <SolidColorBrush x:Key="Theme.DangerButton.Normal.BackgroundBrush" Color="#FFFF4040"/>
    <SolidColorBrush x:Key="Theme.DangerButton.Normal.BorderBrush" Color="#FBB8071C"/>
    <SolidColorBrush x:Key="Theme.DangerButton.Normal.ForegroundBrush" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Theme.DangerButton.MouseOver.BackgroundBrush" Color="#FFF93A3A"/>
    <SolidColorBrush x:Key="Theme.DangerButton.MouseOver.BorderBrush" Color="#FBB20116"/>
    <SolidColorBrush x:Key="Theme.DangerButton.Pressed.BackgroundBrush" Color="#FFCC0D0D"/>
    <SolidColorBrush x:Key="Theme.DangerButton.Pressed.BorderBrush" Color="#FF770000"/>
    <SolidColorBrush x:Key="Theme.DangerButton.Disabled.BackgroundBrush" Color="#FFFFAAAA"/>
    <SolidColorBrush x:Key="Theme.DangerButton.Disabled.BorderBrush" Color="#FFFF8888"/>
    <SolidColorBrush x:Key="Theme.DangerButton.Disabled.ForegroundBrush" Color="#FFFF6666"/>

    <SolidColorBrush x:Key="Theme.PrimaryButton.Normal.BackgroundBrush" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="Theme.PrimaryButton.Normal.BorderBrush" Color="#FF003388"/>
    <SolidColorBrush x:Key="Theme.PrimaryButton.Normal.ForegroundBrush" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Theme.PrimaryButton.MouseOver.BackgroundBrush" Color="#FF0071C6"/>
    <SolidColorBrush x:Key="Theme.PrimaryButton.MouseOver.BorderBrush" Color="#FF002D82"/>
    <SolidColorBrush x:Key="Theme.PrimaryButton.Pressed.BackgroundBrush" Color="#FF004499"/>
    <SolidColorBrush x:Key="Theme.PrimaryButton.Pressed.BorderBrush" Color="#FF000055"/>
    <SolidColorBrush x:Key="Theme.PrimaryButton.Disabled.BackgroundBrush" Color="#FFCCEEFF"/>
    <SolidColorBrush x:Key="Theme.PrimaryButton.Disabled.BorderBrush" Color="#FF99BBCC"/>
    <SolidColorBrush x:Key="Theme.PrimaryButton.Disabled.ForegroundBrush" Color="#FF7799BB"/>

    <!-- CheckBox / RadioButton -->
    <SolidColorBrush x:Key="Theme.CheckMark.Normal.BackgroundBrush" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Normal.BorderBrush" Color="#FFAAAAAA"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Normal.GlyphBrush" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="Theme.CheckMark.MouseOver.BackgroundBrush" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="Theme.CheckMark.MouseOver.BorderBrush" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="Theme.CheckMark.MouseOver.GlyphBrush" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Disabled.BackgroundBrush" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Disabled.BorderBrush" Color="#FFE0E0E0"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Disabled.GlyphBrush" Color="#FF707070"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Pressed.BackgroundBrush" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Pressed.BorderBrush" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Pressed.GlyphBrush" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Checked.BackgroundBrush" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Checked.BorderBrush" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Checked.GlyphBrush" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Theme.CheckMark.Focused.BorderBrush" Color="#07C"/>

    <!-- ListBox -->
    <SolidColorBrush x:Key="Theme.ListBox.Normal.BackgroundBrush" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Theme.ListBox.Normal.BorderBrush" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="Theme.ListBox.Disabled.BackgroundBrush" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Theme.ListBox.Disabled.BorderBrush" Color="#FFD9D9D9" />
    <SolidColorBrush x:Key="Theme.ListBoxItem.MouseOver.BackgroundBrush" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Theme.ListBoxItem.SelectedInactive.BackgroundBrush" Color="#FFE4E4E4"/>
    <SolidColorBrush x:Key="Theme.ListBoxItem.SelectedActive.BackgroundBrush" Color="#FFDFDFDF"/>
    <SolidColorBrush x:Key="Theme.ListBoxItem.BorderBrush" Color="#FFDDDDDD" />
    <SolidColorBrush x:Key="Theme.ListViewColumn.BackgroundBrush" Color="#AFFF" />
    <SolidColorBrush x:Key="Theme.ListViewColumn.BorderBrush" Color="#FFE5EBF0" />
    <SolidColorBrush x:Key="Theme.ListViewColumn.HeaderForeground" Color="#222" />
    <SolidColorBrush x:Key="Theme.ListViewColumn.HeaderBackground" Color="#1555" />
    <SolidColorBrush x:Key="Theme.ListViewColumn.HeaderBorderBrush" Color="#2333" />

    <!-- MenuItem -->
    <SolidColorBrush x:Key="Theme.Menu.BackgroundBrush" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="Theme.Menu.BorderBrush" Color="#FFD7D7D7" />
    <SolidColorBrush x:Key="Theme.MenuPopup.Popup.Normal.BorderBrush" Color="#AA888888" />
    <SolidColorBrush x:Key="Theme.MenuPopup.Popup.Normal.BackgroundBrush" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Theme.MenuItem.Normal.BackgroundBrush" Color="Transparent" />
    <SolidColorBrush x:Key="Theme.MenuItem.Normal.BorderBrush" Color="Transparent" />
    <SolidColorBrush x:Key="Theme.MenuItem.Normal.ForegroundBrush" Color="#000" />
    <SolidColorBrush x:Key="Theme.MenuItem.TopLevel.MouseOver.BackgroundBrush" Color="#FFDDDDDD" />
    <SolidColorBrush x:Key="Theme.MenuItem.Normal.ArrowBrush" Color="#FF444444" />
    <SolidColorBrush x:Key="Theme.MenuItem.MouseOver.ArrowBrush" Color="sc#1, 0.004391443, 0.002428215, 0.242281124" />
    <SolidColorBrush x:Key="Theme.MenuItem.MouseOver.BackgroundBrush" Color="#FF0077CC" />
    <SolidColorBrush x:Key="Theme.MenuItem.MouseOver.BorderBrush" Color="#000" />
    <SolidColorBrush x:Key="Theme.MenuItem.MouseOver.ForegroundBrush" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Theme.MenuItem.Disabled.ForegroundBrush" Color="#FF888888" />
    <SolidColorBrush x:Key="Theme.MenuItem.Separator.Normal.BackgroundBrush" Color="#FFC0C0C0" />

    <!-- Popup -->
    <SolidColorBrush x:Key="Theme.Popup.BackgroundBrush" Color="#f8f8f8" />
    <SolidColorBrush x:Key="Theme.Popup.BorderBrush" Color="#aaa" />

    <!-- Slider -->
    <SolidColorBrush x:Key="Theme.Slider.Thumb.Normal.ForegroundBrush" Color="#FFE5E5E5"/>
    <SolidColorBrush x:Key="Theme.Slider.Thumb.MouseOver.BackgroundBrush" Color="#FFDCECFC"/>
    <SolidColorBrush x:Key="Theme.Slider.Thumb.MouseOver.BorderBrush" Color="#FF7Eb4EA"/>
    <SolidColorBrush x:Key="Theme.Slider.Thumb.Pressed.BackgroundBrush" Color="#FFDAECFC"/>
    <SolidColorBrush x:Key="Theme.Slider.Thumb.Pressed.BorderBrush" Color="#FF0077CC"/>
    <SolidColorBrush x:Key="Theme.Slider.Thumb.Disabled.BackgroundBrush" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="Theme.Slider.Thumb.Disabled.BorderBrush" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="Theme.Slider.Thumb.Normal.BackgroundBrush" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="Theme.Slider.Thumb.Normal.BorderBrush" Color="#FFACACAC"/>
    <SolidColorBrush x:Key="Theme.Slider.Track.BorderBrush" Color="#FFD6D6D6"/>
    <SolidColorBrush x:Key="Theme.Slider.Track.BackgroundBrush" Color="#FFE7EAEA"/>

    <!-- TabControl -->
    <SolidColorBrush x:Key="Theme.TabControl.Normal.BackgroundBrush" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Theme.TabControl.Normal.BorderBrush" Color="#FFCCCCCC" />
    <SolidColorBrush x:Key="Theme.TabPanel.Normal.BackgroundBrush" Color="#FFEEEEEE" />
    <SolidColorBrush x:Key="Theme.TabItem.Normal.BackgroundBrush" Color="#FFF4F4F4" />
    <SolidColorBrush x:Key="Theme.TabItem.Normal.ForegroundBrush" Color="#FF000000" />
    <SolidColorBrush x:Key="Theme.TabItem.Normal.BorderBrush" Color="#FFCCCCCC" />
    <SolidColorBrush x:Key="Theme.TabItem.MouseOver.BackgroundBrush" Color="#FFFAFAFA" />
    <SolidColorBrush x:Key="Theme.TabItem.Selected.BackgroundBrush" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Theme.TabItem.Selected.ForegroundBrush" Color="#FF666666" />
    <SolidColorBrush x:Key="Theme.TabItem.Disabled.BackgroundBrush" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Theme.TabItem.Disabled.ForegroundBrush" Color="#FF666666" />

    <!-- ToolBar -->
    <SolidColorBrush x:Key="Theme.ToolBar.Normal.BackgroundBrush" Color="#FFF8F8F8"/>
    <SolidColorBrush x:Key="Theme.ToolBar.Normal.BorderBrush" Color="#FFDADADA" />
    <SolidColorBrush x:Key="Theme.ToolBar.Normal.ForegroundBrush" Color="#FF444444" />
    <SolidColorBrush x:Key="Theme.ToolBar.Gripper.FillBrush" Color="#FFAAAAAA"/>
    <SolidColorBrush x:Key="Theme.ToolBarOverflow.Normal.BorderBrush" Color="#FFB6BDC5"/>
    <SolidColorBrush x:Key="Theme.ToolBarOverflow.Normal.BackgroundBrush" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Theme.ToolBarButton.MouseOver.BorderBrush" Color="#FFAAAAAA"/>
    <SolidColorBrush x:Key="Theme.ToolBarButton.MouseOver.BackgroundBrush" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="Theme.ToolBarButton.Pressed.BorderBrush" Color="#FF909090"/>
    <SolidColorBrush x:Key="Theme.ToolBarButton.Pressed.BackgroundBrush" Color="#FFC0C0C0"/>
    <SolidColorBrush x:Key="Theme.ToolBarButton.Checked.BackgroundBrush" Color="#FFC0C0C0"/>
    <SolidColorBrush x:Key="Theme.ToolBarToggleButton.Normal.BackgroundBrush" Color="#FFD7D7D7"/>
    <SolidColorBrush x:Key="Theme.ToolBarToggleButton.MouseOver.BackgroundBrush" Color="#FFC0C0C0"/>

    <!-- Window -->
    <SolidColorBrush x:Key="Theme.Window.Active.BorderBrush" Color="#FF0077CC" />
    <SolidColorBrush x:Key="Theme.Window.Inactive.BorderBrush" Color="#FFDDDDDD" />
    <SolidColorBrush x:Key="Theme.WindowTitleBar.Active.BackgroundBrush" Color="#FFDADADA" />
    <SolidColorBrush x:Key="Theme.WindowTitleBar.Inactive.BackgroundBrush" Color="#FFF8F8F8"/>
    <SolidColorBrush x:Key="Theme.WindowTitleBar.Active.ForegroundBrush" Color="#FF222222" />
    <SolidColorBrush x:Key="Theme.WindowTitleBar.Inactive.ForegroundBrush" Color="#FF666666" />

    <!--#endregion Colors -->

    <!--#endregion Common -->

    <PopupAnimation x:Key="{x:Static SystemParameters.MenuPopupAnimationKey}">None</PopupAnimation>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="True"
                        StrokeDashArray="1 2" StrokeThickness="1"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Padding" Value="0" />
        <Setter Property="Control.Margin" Value="0" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="0, 0, 0, 0"
                        SnapsToDevicePixels="True"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeThickness="1"
                        StrokeDashArray="1, 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Geometry x:Key="Theme.CheckMark.Geometry">F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z</Geometry>
    <Geometry x:Key="Theme.MenuPopup.UpArrow.Geometry">M 0,0 6,0 3,-3 z</Geometry>
    <Geometry x:Key="Theme.MenuPopup.DownArrow.Geometry">M 0,0 6,0 3,3 z</Geometry>

    <DropShadowEffect x:Key="Theme.InputBox.Focus.ShadowEffect" ShadowDepth="0" BlurRadius="4" Opacity=".5" Color="#07c" />
    <DropShadowEffect x:Key="Theme.InputBox.Normal.ShadowEffect" Color="#000000" Direction="270" ShadowDepth="6" BlurRadius="14" Opacity="0.2" />
    <Thickness x:Key="Theme.InputBox.Shadow.Margin">7,7,7,14</Thickness>

    <!--#endregion Common -->

    <!--#region Menu style -->

    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource Theme.Menu.BackgroundBrush}"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuScrollButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Padding" Value="4" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border
                        x:Name="border"
                        Padding="{TemplateBinding Padding}"
                        Background="Transparent">
                        <ContentPresenter
                            ContentSource="Content"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#11000000" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#33000000" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value=".7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />

    <Style x:Key="MenuScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}" />
                        </Border>
                        <RepeatButton
                            Style="{StaticResource MenuScrollButton}"
                            Grid.Row="0"
                            Command="{x:Static ScrollBar.LineUpCommand}"
                            CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding
                                    FallbackValue="Visibility.Collapsed"
                                    Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                    ConverterParameter="0">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path
                                Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                Data="{StaticResource Theme.MenuPopup.UpArrow.Geometry}" />
                        </RepeatButton>
                        <RepeatButton
                            Style="{StaticResource MenuScrollButton}"
                            Grid.Row="2"
                            Command="{x:Static ScrollBar.LineDownCommand}"
                            CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed"
                                    Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                    ConverterParameter="100">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path
                                Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                Data="{StaticResource Theme.MenuPopup.DownArrow.Geometry}" />
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="6 2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border
                        BorderThickness="1"
                        BorderBrush="{StaticResource Theme.MenuItem.Separator.Normal.BackgroundBrush}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Grid x:Name="Border" Background="Transparent">
            <ContentPresenter
                Margin="6 3"
                ContentSource="Header"
                RecognizesAccessKey="True" />
            <Popup
                x:Name="Popup"
                Placement="Bottom"
                IsOpen="{TemplateBinding IsSubmenuOpen}"
                AllowsTransparency="True"
                Focusable="False"
                PopupAnimation="None"
                HorizontalOffset="-1">
                <Grid
                    Margin="{StaticResource Theme.InputBox.Shadow.Margin}"
                    UseLayoutRounding="True"
                    SnapsToDevicePixels="True">
                    <Rectangle
                        Fill="{StaticResource Theme.MenuPopup.Popup.Normal.BackgroundBrush}"
                        Stroke="{StaticResource Theme.MenuPopup.Popup.Normal.BorderBrush}"
                        StrokeThickness="1" RadiusX="4" RadiusY="4"
                        Effect="{StaticResource Theme.InputBox.Normal.ShadowEffect}" />
                    <ScrollViewer
                        Margin="4"
                        CanContentScroll="True"
                        Style="{StaticResource MenuScrollViewer}">
                        <StackPanel
                            IsItemsHost="True"
                            Grid.IsSharedSizeScope="True"
                            KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </ScrollViewer>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{StaticResource Theme.MenuItem.TopLevel.MouseOver.BackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Theme.MenuItem.Disabled.ForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" Background="Transparent">
            <Grid>
                <ContentPresenter
                    Margin="6 3"
                    ContentSource="Header"
                    RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{StaticResource Theme.MenuItem.TopLevel.MouseOver.BackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Theme.MenuItem.Disabled.ForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border
            x:Name="Border"
            MinHeight="24" CornerRadius="3"
            Padding="{TemplateBinding Padding}"
            Background="Transparent"
            TextElement.Foreground="{TemplateBinding Foreground}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Check" />
                    <ColumnDefinition Width="Auto" MinWidth="32" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="CheckMark"
                    Margin="1,0,0,0"
                    Width="18" Height="18"
                    Visibility="Collapsed"
                    VerticalAlignment="Center"
                    CornerRadius="2"
                    BorderThickness="1"
                    Background="#FF0077CC">
                    <Path
                        x:Name="CheckMarkPath"
                        Width="10" Height="10"
                        Stretch="Uniform"
                        SnapsToDevicePixels="False"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Fill="{StaticResource Theme.MenuItem.MouseOver.ForegroundBrush}"
                        Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z" />
                </Border>
                <ContentPresenter
                    x:Name="Icon"
                    Grid.Column="1"
                    Margin="6 0"
                    VerticalAlignment="Center"
                    ContentSource="Icon" />
                <ContentPresenter
                    x:Name="HeaderHost"
                    Grid.Column="2"
                    VerticalAlignment="Center"
                    RecognizesAccessKey="True"
                    ContentSource="Header" />
                <TextBlock
                    x:Name="InputGestureText"
                    Grid.Column="3"
                    DockPanel.Dock="Right"
                    Margin="5 0 0 0"
                    VerticalAlignment="Center"
                    Opacity=".7"
                    Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{StaticResource Theme.MenuItem.MouseOver.BackgroundBrush}" />
                <Setter Property="TextElement.Foreground" TargetName="Border" Value="{StaticResource Theme.MenuItem.MouseOver.ForegroundBrush}" />
                <Setter Property="Background" TargetName="CheckMark" Value="#FFFFFFFF" />
                <Setter Property="Fill" TargetName="CheckMarkPath" Value="{StaticResource Theme.MenuItem.MouseOver.BackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Theme.MenuItem.Disabled.ForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuHeaderTemplate -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border
            x:Name="Border"
            MinHeight="24" CornerRadius="3"
            Padding="{TemplateBinding Padding}"
            Background="Transparent"
            TextElement.Foreground="{TemplateBinding Foreground}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Check" />
                    <ColumnDefinition Width="Auto" MinWidth="32" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter
                    x:Name="Icon"
                    Grid.Column="1"
                    Margin="6 0"
                    VerticalAlignment="Center"
                    ContentSource="Icon" />
                <ContentPresenter
                    x:Name="HeaderHost"
                    Grid.Column="2"
                    VerticalAlignment="Center"
                    ContentSource="Header"
                    RecognizesAccessKey="True" />
                <TextBlock
                    x:Name="InputGestureText"
                    Grid.Column="3"
                    DockPanel.Dock="Right"
                    Margin="5 0 2 0"
                    Opacity=".7"
                    VerticalAlignment="Center"
                    Text="{TemplateBinding InputGestureText}" />
                <Path
                    Grid.Column="4"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Fill="{Binding ElementName=Border, Path=(TextElement.Foreground)}"
                    Data="M 0 0 L 0 7 L 4 3.5 Z" />
                <Popup
                    x:Name="Popup"
                    Placement="Right"
                    IsOpen="{TemplateBinding IsSubmenuOpen}"
                    AllowsTransparency="True"
                    Focusable="False"
                    PopupAnimation="None"
                    HorizontalOffset="1"
                    VerticalOffset="-7">
                    <Grid
                        x:Name="SubmenuBorder"
                        Margin="{StaticResource Theme.InputBox.Shadow.Margin}"
                        UseLayoutRounding="True"
                        SnapsToDevicePixels="True">
                        <Rectangle
                            Fill="{StaticResource Theme.MenuPopup.Popup.Normal.BackgroundBrush}"
                            Stroke="{StaticResource Theme.MenuPopup.Popup.Normal.BorderBrush}"
                            StrokeThickness="1" RadiusX="4" RadiusY="4"
                            Effect="{StaticResource Theme.InputBox.Normal.ShadowEffect}"/>

                        <ScrollViewer
                            Margin="4" CanContentScroll="True"
                            Style="{StaticResource MenuScrollViewer}">
                            <StackPanel
                                IsItemsHost="True"
                                Grid.IsSharedSizeScope="True"
                                KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Grid>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="Border" Value="{StaticResource Theme.MenuItem.MouseOver.BackgroundBrush}" />
                <Setter Property="TextElement.Foreground" TargetName="Border" Value="{StaticResource Theme.MenuItem.MouseOver.ForegroundBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Theme.MenuItem.Disabled.ForegroundBrush}">
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->
    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
                <Setter Property="Padding" Value="3" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
                <Setter Property="Padding" Value="3" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion Menu style -->

    <!--#region ContextMenu style -->

    <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="TextBlock.TextAlignment" Value="Justify" />
        <Setter Property="Foreground" Value="#000000" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontStretch" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontFamily" Value="{StaticResource UIFont}" />
        <Setter Property="FontSize" Value="{StaticResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="HorizontalOffset" Value="-8" />
        <Setter Property="VerticalOffset" Value="-8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid
                        Margin="{StaticResource Theme.InputBox.Shadow.Margin}"
                        UseLayoutRounding="True"
                        SnapsToDevicePixels="True">
                        <Rectangle
                            Fill="{StaticResource Theme.MenuPopup.Popup.Normal.BackgroundBrush}"
                            Stroke="{StaticResource Theme.MenuPopup.Popup.Normal.BorderBrush}"
                            StrokeThickness="1" RadiusX="4" RadiusY="4"
                            Effect="{StaticResource Theme.InputBox.Normal.ShadowEffect}" />
                        <ScrollViewer
                            Margin="4" CanContentScroll="True"
                            Style="{StaticResource MenuScrollViewer}">
                            <StackPanel
                                IsItemsHost="True"
                                Grid.IsSharedSizeScope="True"
                                KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region TextBox style -->

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="3 4" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Theme.InputBox.Normal.BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Rectangle
                            x:Name="focuBorder"
                            Margin="-3" Visibility="Collapsed" IsHitTestVisible="False"
                            RadiusX="3" RadiusY="3" Opacity="0.2" StrokeThickness="3" />
                        <Border
                            x:Name="border"
                            CornerRadius="2"
                            ClipToBounds="{TemplateBinding ClipToBounds}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="False"
                                Padding="{TemplateBinding Padding}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                                VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_ContentHost" Property="Opacity" Value="0.56"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource Theme.InputBox.Disabled.BackgroundBrush}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Theme.InputBox.Disabled.BorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Theme.InputBox.MouseOver.BorderBrush}"/>
                            <Setter TargetName="focuBorder" Property="Stroke" Value="{StaticResource Theme.InputBox.MouseOver.BorderBrush}" />
                            <Setter TargetName="focuBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Theme.InputBox.Focus.BorderBrush}"/>
                            <Setter TargetName="focuBorder" Property="Stroke" Value="{StaticResource Theme.InputBox.Focus.BorderBrush}" />
                            <Setter TargetName="focuBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Theme.InputBox.Error.BorderBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Validation.HasError" Value="True" />
                                <Condition Property="IsKeyboardFocusWithin" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="focuBorder" Property="Stroke" Value="{StaticResource Theme.InputBox.Error.BorderBrush}" />
                            <Setter TargetName="focuBorder" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu Style="{StaticResource {x:Type ContextMenu}}">
                    <MenuItem Command="{x:Static ApplicationCommands.Cut}" />
                    <MenuItem Command="{x:Static ApplicationCommands.Copy}" />
                    <MenuItem Command="{x:Static ApplicationCommands.Paste}" />
                    <Separator />
                    <MenuItem Command="{x:Static ApplicationCommands.SelectAll}" />
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--#endregion TextBox style -->

    <!--#region ComboBox style -->

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Rectangle
                            x:Name="focuBorder"
                            Margin="-3" Visibility="Collapsed" IsHitTestVisible="False"
                            RadiusX="3" RadiusY="3" Opacity="0.2" StrokeThickness="3" />
                        <Border
                            x:Name="templateRoot"
                            SnapsToDevicePixels="True"
                            CornerRadius="2"
                            Background="{StaticResource Theme.InputBox.Normal.BackgroundBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{StaticResource Theme.InputBox.Normal.BorderBrush}">
                            <Border
                                x:Name="splitBorder"
                                Margin="0"
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                SnapsToDevicePixels="True"
                                HorizontalAlignment="Right"
                                BorderThickness="0"
                                BorderBrush="Transparent">
                                <Path
                                    x:Name="arrow"
                                    Margin="0"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center"
                                    Fill="{StaticResource Theme.ComboBox.Normal.ArrowBrush}"
                                    Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 Z"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Theme.InputBox.Normal.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource Theme.InputBox.Normal.BorderBrush}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource Theme.InputBox.Normal.ToggleButotn.BackgroundBrush}"/>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource Theme.ComboBox.MouseOver.ArrowBrush}"/>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Theme.InputBox.MouseOver.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource Theme.InputBox.MouseOver.BorderBrush}"/>
                            <Setter TargetName="focuBorder" Property="Stroke" Value="{StaticResource Theme.InputBox.MouseOver.BorderBrush}" />
                            <Setter TargetName="focuBorder" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource Theme.InputBox.MouseOver.ToggleButotn.BackgroundBrush}"/>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"  Value="True">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource Theme.ComboBox.Pressed.ArrowBrush}" />
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Theme.InputBox.Focus.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource Theme.InputBox.Focus.BorderBrush}"/>
                            <Setter TargetName="focuBorder" Property="Stroke" Value="{StaticResource Theme.InputBox.Focus.BorderBrush}" />
                            <Setter TargetName="focuBorder" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource Theme.InputBox.Pressed.ToggleButotn.BackgroundBrush}" />
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource Theme.ComboBox.Disabled.ArrowBrush}" />
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Theme.InputBox.Disabled.BackgroundBrush}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource Theme.InputBox.Disabled.BorderBrush}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource Theme.InputBox.Disabled.ToggleButotn.BackgroundBrush}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource Theme.InputBox.Focus.BorderBrush}"/>
                            <Setter TargetName="focuBorder" Property="Stroke" Value="{StaticResource Theme.InputBox.Focus.BorderBrush}" />
                            <Setter TargetName="focuBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <DataTrigger Binding="{Binding (Validation.HasError), RelativeSource={RelativeSource AncestorType=ComboBox}, Mode=OneWay}" Value="True">
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource Theme.InputBox.Error.BorderBrush}"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding (Validation.HasError), RelativeSource={RelativeSource AncestorType=ComboBox}, Mode=OneWay}" Value="True" />
                                <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType=ComboBox}, Mode=OneWay}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="focuBorder" Property="Stroke" Value="{StaticResource Theme.InputBox.Error.BorderBrush}" />
                            <Setter TargetName="focuBorder" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>

            <Popup
                x:Name="PART_Popup"
                AllowsTransparency="True"
                Grid.ColumnSpan="2"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Margin="1" VerticalOffset="-1"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                Placement="Bottom">
                <Grid
                    x:Name="shadow"
                    Margin="0"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border
                        x:Name="dropDownBorder"
                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        BorderThickness="1"
                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Grid>
            </Popup>

            <ToggleButton
                x:Name="toggleButton"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                Grid.ColumnSpan="2"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource ComboBoxToggleButton}" />

            <ContentPresenter
                x:Name="contentPresenter"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                IsHitTestVisible="False"
                Margin="{TemplateBinding Padding}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                <Setter TargetName="shadow" Property="Margin" Value="{StaticResource Theme.InputBox.Shadow.Margin}"/>
                <Setter TargetName="shadow" Property="Effect" Value="{StaticResource Theme.InputBox.Normal.ShadowEffect}"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Focusable="False"
                        Background="Transparent"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup
                x:Name="PART_Popup"
                AllowsTransparency="True"
                Grid.ColumnSpan="2"
                IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                Placement="Bottom">
                <Grid
                    x:Name="shadow"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border
                        x:Name="dropDownBorder"
                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        BorderThickness="1"
                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Grid>
            </Popup>

            <ToggleButton
                x:Name="toggleButton"
                Grid.ColumnSpan="2"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource ComboBoxToggleButton}" />

            <Border
                x:Name="border"
                CornerRadius="1"
                Background="{StaticResource Theme.InputBox.Normal.BackgroundBrush}"
                Margin="{TemplateBinding BorderThickness}">
                <TextBox
                    x:Name="PART_EditableTextBox"
                    Margin="{TemplateBinding Padding}"
                    Style="{StaticResource ComboBoxEditableTextBox}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                <Setter TargetName="shadow" Property="Margin" Value="{StaticResource Theme.InputBox.Shadow.Margin}"/>
                <Setter TargetName="shadow" Property="Effect" Value="{StaticResource Theme.InputBox.Normal.ShadowEffect}"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>

            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="border" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="border" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Theme.InputBox.Normal.BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Theme.InputBox.Normal.BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6 5 5 5"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="Padding" Value="3 4"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion ComboBox style -->

    <!--#region HeaderedContentControl style -->

    <SolidColorBrush x:Key="Theme.HeaderedContent.HeaderLabel.Normal.ForegroundBrush">#444444</SolidColorBrush>
    <SolidColorBrush x:Key="Theme.HeaderedContent.HeaderLabel.Focus.ForegroundBrush">#0077CC</SolidColorBrush>

    <Style x:Key="HedaderedContentStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Label x:Name="label" FontWeight="Bold" Foreground="{StaticResource Theme.HeaderedContent.HeaderLabel.Normal.ForegroundBrush}" Content="{Binding}" Padding="0" Margin="0 0 0 6" />
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type HeaderedContentControl}}}" Value="True">
                            <Setter TargetName="label" Property="Foreground" Value="{StaticResource Theme.HeaderedContent.HeaderLabel.Focus.ForegroundBrush}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter
                            DockPanel.Dock="Top"
                            ContentSource="Header"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" />
                        <ContentPresenter
                            ContentSource="Content"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion HeaderedContentControl style -->

    <!--#region Butotn styles -->

    <Style x:Key="ButtonBaseStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Padding" Value="6 4"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Background" Value="{StaticResource Theme.Button.Normal.BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Theme.Button.Normal.BorderBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource Theme.Button.Normal.ForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            CornerRadius="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Theme.Button.MouseOver.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Theme.Button.MouseOver.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Theme.Button.Pressed.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Theme.Button.Pressed.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Theme.Button.Disabled.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Theme.Button.Disabled.BorderBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Theme.Button.Disabled.ForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DangerButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Background" Value="{StaticResource Theme.DangerButton.Normal.BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Theme.DangerButton.Normal.BorderBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource Theme.DangerButton.Normal.ForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            CornerRadius="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Theme.DangerButton.MouseOver.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Theme.DangerButton.MouseOver.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Theme.DangerButton.Pressed.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Theme.DangerButton.Pressed.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Theme.DangerButton.Disabled.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Theme.DangerButton.Disabled.BorderBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Theme.DangerButton.Disabled.ForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PrimaryButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Background" Value="{StaticResource Theme.PrimaryButton.Normal.BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Theme.PrimaryButton.Normal.BorderBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource Theme.PrimaryButton.Normal.ForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            CornerRadius="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Theme.PrimaryButton.MouseOver.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Theme.PrimaryButton.MouseOver.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Theme.PrimaryButton.Pressed.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Theme.PrimaryButton.Pressed.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Theme.PrimaryButton.Disabled.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Theme.PrimaryButton.Disabled.BorderBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Theme.PrimaryButton.Disabled.ForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion Button styles -->

    <!--#region CheckBox style -->

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Margin" Value="0, 1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Theme.CheckMark.Normal.BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Theme.CheckMark.Normal.BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid
                        x:Name="templateRoot"
                        Background="Transparent"
                        UseLayoutRounding="False">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Rectangle
                            x:Name="checkBoxBorder"
                            Width="15" Height="15"
                            RadiusX="1" RadiusY="1"
                            Fill="{TemplateBinding Background}"
                            Stroke="{TemplateBinding BorderBrush}"
                            StrokeThickness="{TemplateBinding BorderThickness}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        <Path
                            x:Name="optionMark"
                            Margin="2" Stretch="Uniform"
                            Visibility="Hidden"
                            Width="11" Height="11"
                            Fill="{StaticResource Theme.CheckMark.Normal.GlyphBrush}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Data="{StaticResource Theme.CheckMark.Geometry}" />
                        <Rectangle
                            x:Name="indeterminateMark"
                            Margin="4"
                            Visibility="Hidden"
                            Width="7" Height="7"
                            RadiusX="0.7" RadiusY="0.7"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="Padding" Value="4 0 0 0"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="checkBoxBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.Focused.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="indeterminateMark" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource Theme.CheckMark.Checked.GlyphBrush}"/>
                            <Setter TargetName="checkBoxBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.Checked.BackgroundBrush}"/>
                            <Setter TargetName="checkBoxBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.Checked.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="optionMark" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="indeterminateMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="checkBoxBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.Checked.BackgroundBrush}"/>
                            <Setter TargetName="checkBoxBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.Checked.BorderBrush}"/>
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource Theme.CheckMark.Checked.GlyphBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="checkBoxBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.MouseOver.BorderBrush}"/>
                            <Setter TargetName="checkBoxBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.MouseOver.BorderBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="checkBoxBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.MouseOver.BackgroundBrush}"/>
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource Theme.CheckMark.MouseOver.GlyphBrush}"/>
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource Theme.CheckMark.MouseOver.GlyphBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="checkBoxBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.Pressed.BorderBrush}"/>
                            <Setter TargetName="checkBoxBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.Pressed.BorderBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="checkBoxBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.Pressed.BackgroundBrush}"/>
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource Theme.CheckMark.Pressed.GlyphBrush}"/>
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource Theme.CheckMark.Pressed.GlyphBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="checkBoxBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.Disabled.BackgroundBrush}"/>
                            <Setter TargetName="checkBoxBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.Disabled.BorderBrush}"/>
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource Theme.CheckMark.Disabled.GlyphBrush}"/>
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource Theme.CheckMark.Disabled.GlyphBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion CheckBox style -->

    <!--#region RadioButton style -->

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="Margin" Value="0, 1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Theme.CheckMark.Normal.BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Theme.CheckMark.Normal.BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid
                        x:Name="templateRoot"
                        Background="Transparent"
                        UseLayoutRounding="False">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Ellipse
                            x:Name="radioButtonBorder"
                            Width="15" Height="15"
                            Fill="{TemplateBinding Background}"
                            Stroke="{TemplateBinding BorderBrush}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        <Ellipse
                            Margin="4"
                            x:Name="optionMark"
                            Opacity="0"
                            Width="7" Height="7"
                            VerticalAlignment="Stretch"
                            HorizontalAlignment="Stretch"
                            StrokeThickness="1"
                            Fill="{StaticResource Theme.CheckMark.Normal.GlyphBrush}" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="Padding" Value="4 0 0 0"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="radioButtonBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.Focused.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="optionMark" Property="Opacity" Value="1"/>
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource Theme.CheckMark.Checked.GlyphBrush}"/>
                            <Setter TargetName="radioButtonBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.Checked.BackgroundBrush}"/>
                            <Setter TargetName="radioButtonBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.Checked.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="optionMark" Property="Opacity" Value="0.56"/>
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource Theme.CheckMark.Checked.GlyphBrush}"/>
                            <Setter TargetName="radioButtonBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.Checked.BackgroundBrush}"/>
                            <Setter TargetName="radioButtonBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.Checked.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="radioButtonBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.MouseOver.BorderBrush}"/>
                            <Setter TargetName="radioButtonBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.MouseOver.BorderBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="radioButtonBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.MouseOver.BackgroundBrush}"/>
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource Theme.CheckMark.MouseOver.GlyphBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="radioButtonBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.Pressed.BorderBrush}"/>
                            <Setter TargetName="radioButtonBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.Pressed.BorderBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="radioButtonBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.Pressed.BackgroundBrush}"/>
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource Theme.CheckMark.Pressed.GlyphBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="radioButtonBorder" Property="Fill" Value="{StaticResource Theme.CheckMark.Disabled.BackgroundBrush}"/>
                            <Setter TargetName="radioButtonBorder" Property="Stroke" Value="{StaticResource Theme.CheckMark.Disabled.BorderBrush}"/>
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource Theme.CheckMark.Disabled.GlyphBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion RadioButton syle -->

    <!--#region Slider style-->

    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Fill="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="SliderThumbDefault" TargetType="{x:Type Thumb}">
        <Grid
            UseLayoutRounding="True"
            VerticalAlignment="Center"
            HorizontalAlignment="Center">
            <Ellipse
                x:Name="grip"
                Width="14" Height="14"
                Fill="{StaticResource Theme.Slider.Thumb.Normal.BackgroundBrush}"
                Stroke="{StaticResource Theme.Slider.Thumb.Normal.BorderBrush}"
                StrokeThickness="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource Theme.Slider.Thumb.MouseOver.BackgroundBrush}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource Theme.Slider.Thumb.MouseOver.BorderBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource Theme.Slider.Thumb.Pressed.BackgroundBrush}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource Theme.Slider.Thumb.Pressed.BorderBrush}"/>
                <Setter Property="Effect" TargetName="grip" Value="{StaticResource Theme.InputBox.Focus.ShadowEffect}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource Theme.Slider.Thumb.Disabled.BackgroundBrush}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource Theme.Slider.Thumb.Disabled.BorderBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
        <Border
            x:Name="border"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TickBar
                    x:Name="TopTick"
                    Grid.Row="0"
                    Margin="0 0 0 2"
                    Height="4"
                    Placement="Top"
                    Visibility="Collapsed"
                    Fill="{TemplateBinding Foreground}" />
                <TickBar
                    x:Name="BottomTick"
                    Grid.Row="2"
                    Margin="0 2 0 0"
                    Height="4"
                    Placement="Bottom"
                    Visibility="Collapsed"
                    Fill="{TemplateBinding Foreground}" />
                <Border
                    x:Name="TrackBackground"
                    Grid.Row="1"
                    Margin="5 0"
                    Height="3" 
                    VerticalAlignment="center"
                    Background="{StaticResource Theme.Slider.Track.BackgroundBrush}">
                    <Canvas Margin="-6 -1">
                        <Rectangle
                            x:Name="PART_SelectionRange"
                            Height="3"
                            Visibility="Hidden"
                            Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton
                            Command="{x:Static Slider.DecreaseLarge}"
                            Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton
                            Command="{x:Static Slider.IncreaseLarge}"
                            Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb
                            x:Name="Thumb"
                            Focusable="False"
                            Width="14" Height="14"
                            OverridesDefaultStyle="True"
                            VerticalAlignment="Center"
                            Template="{StaticResource SliderThumbDefault}" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5 2 5 0"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5 0 5 2"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="True">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
        <Border
            x:Name="border"
            SnapsToDevicePixels="True"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TickBar
                    x:Name="TopTick"
                    Grid.Column="0"
                    Margin="0 0 2 0"
                    Width="4"
                    Placement="Left"
                    Visibility="Collapsed"
                    Fill="{TemplateBinding Foreground}" />
                <TickBar
                    x:Name="BottomTick"
                    Grid.Column="2"
                    Margin="2 0 0 0"
                    Width="4"
                    Placement="Right"
                    Visibility="Collapsed"
                    Fill="{TemplateBinding Foreground}" />
                <Border
                    x:Name="TrackBackground"
                    Grid.Column="1"
                    Margin="0 5"
                    Width="3"
                    HorizontalAlignment="center"
                    Background="{StaticResource Theme.Slider.Track.BackgroundBrush}">
                    <Canvas Margin="-1 -6">
                        <Rectangle
                            x:Name="PART_SelectionRange"
                            Width="4.0"
                            Visibility="Hidden"
                            Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb
                            x:Name="Thumb"
                            Focusable="False"
                            Width="14" Height="14"
                            OverridesDefaultStyle="True"
                            VerticalAlignment="Top"
                            Template="{StaticResource SliderThumbDefault}" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="True">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource Theme.Slider.Thumb.Normal.ForegroundBrush}"/>
        <Setter Property="Template" Value="{StaticResource SliderHorizontal}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource SliderVertical}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion Slider style -->

    <!--#region ToolBar style -->

    <Style TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="{StaticResource Theme.ToolBar.Normal.BackgroundBrush}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource Theme.ToolBarToggleButton.Normal.BackgroundBrush}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="Bd"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <Canvas
                            HorizontalAlignment="Right"
                            Height="6"
                            Margin="2 7 2 2"
                            SnapsToDevicePixels="True"
                            VerticalAlignment="Bottom"
                            Width="7">
                            <Path Data="M 1.5 1 L 1.5 6" Stroke="White"/>
                            <Path Data="M 0.5 0 L 0.5 5" Stroke="{TemplateBinding Foreground}"/>
                            <Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="White"/>
                            <Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{TemplateBinding Foreground}"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Theme.ToolBarToggleButton.MouseOver.BackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Theme.ToolBarToggleButton.MouseOver.BackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource Theme.ToolBar.Gripper.FillBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource Theme.ToolBarToggleButton.Normal.BackgroundBrush}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="Bd"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <Canvas
                            HorizontalAlignment="Right"
                            Height="7"
                            Margin="7 2 2 2"
                            SnapsToDevicePixels="True"
                            VerticalAlignment="Bottom"
                            Width="6">
                            <Path Data="M 1 1.5 L 6 1.5" Stroke="White"/>
                            <Path Data="M 0 0.5 L 5 0.5" Stroke="{TemplateBinding Foreground}"/>
                            <Path Data="M 0.5 4 L 6.5 4 L 3.5 7 Z" Fill="White"/>
                            <Path Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="{TemplateBinding Foreground}"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Theme.ToolBarToggleButton.MouseOver.BackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Theme.ToolBarToggleButton.MouseOver.BackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource Theme.ToolBar.Gripper.FillBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile" Viewbox="0 0 4 4" Viewport="0,0,4,4" ViewportUnits="Absolute" ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="White" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
                                            <GeometryDrawing Brush="{StaticResource Theme.ToolBar.Gripper.FillBrush}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ToolBarHorizontalControlTemplate" TargetType="{x:Type ToolBar}">
        <Grid x:Name="Grid" SnapsToDevicePixels="True">
            <Grid x:Name="OverflowGrid" HorizontalAlignment="Right" Visibility="Collapsed">
                <ToggleButton
                    x:Name="OverflowButton"
                    ClickMode="Press"
                    FocusVisualStyle="{x:Null}"
                    IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}"
                    Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" />
                <Popup
                    x:Name="OverflowPopup"
                    AllowsTransparency="True"
                    Focusable="False"
                    IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                    Placement="Bottom"
                    StaysOpen="False">
                    <Grid x:Name="shadow" SnapsToDevicePixels="True" Margin="0" Effect="{x:Null}">
                        <Border
                            x:Name="ToolBarSubMenuBorder"
                            BorderBrush="{StaticResource Theme.ToolBarOverflow.Normal.BorderBrush}"
                            BorderThickness="1"
                            Background="{StaticResource Theme.ToolBarOverflow.Normal.BackgroundBrush}"
                            RenderOptions.ClearTypeHint="Enabled">
                            <ToolBarOverflowPanel
                                x:Name="PART_ToolBarOverflowPanel"
                                KeyboardNavigation.DirectionalNavigation="Cycle" FocusVisualStyle="{x:Null}" Focusable="True" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                KeyboardNavigation.TabNavigation="Cycle"
                                WrapWidth="200" />
                        </Border>
                    </Grid>
                </Popup>
            </Grid>
            <Border
                x:Name="MainPanelBorder"
                Margin="0"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
                <DockPanel
                    KeyboardNavigation.TabIndex="1"
                    KeyboardNavigation.TabNavigation="Local">
                    <Thumb
                        x:Name="ToolBarThumb"
                        Margin="-3 -1 0 0"
                        Padding="6 5 1 6"
                        Style="{StaticResource ToolBarThumbStyle}"
                        Width="10" />
                    <ContentPresenter
                        x:Name="ToolBarHeader"
                        Margin="4 0"
                        ContentSource="Header"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <ToolBarPanel
                        x:Name="PART_ToolBarPanel"
                        Margin="2"
                        IsItemsHost="True"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </DockPanel>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen" Value="True">
                <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="False"/>
            </Trigger>
            <Trigger Property="Header" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="True">
                <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="True">
                <Setter TargetName="shadow" Property="Margin" Value="{StaticResource Theme.InputBox.Shadow.Margin}" />
                <Setter TargetName="shadow" Property="Effect" Value="{StaticResource Theme.InputBox.Normal.ShadowEffect}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
                <Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
                <Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
                <Setter Property="Margin" TargetName="ToolBarThumb" Value="-1 -3 0 0"/>
                <Setter Property="Padding" TargetName="ToolBarThumb" Value="5 6 6 1"/>
                <Setter Property="Margin" TargetName="ToolBarHeader" Value="0 0 0 4"/>
                <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="2"/>
                <Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
                <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
                <Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
                <Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
                <Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
                <Setter Property="Background" Value="{StaticResource Theme.ToolBar.Normal.BackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="HasOverflowItems" Value="True">
                <Setter Property="Visibility" TargetName="OverflowGrid" Value="Visible" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasOverflowItems" Value="True" />
                    <Condition Property="Orientation" Value="Horizontal" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="MainPanelBorder" Value="0 0 11 0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasOverflowItems" Value="True" />
                    <Condition Property="Orientation" Value="Vertical" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="MainPanelBorder" Value="0 0 0 11" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="{StaticResource Theme.ToolBar.Normal.BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource Theme.ToolBar.Normal.BorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource Theme.ToolBar.Normal.ForegroundBrush}" />
        <Setter Property="BorderThickness" Value="0 0 0 1" />
        <Setter Property="Template" Value="{StaticResource ToolBarHorizontalControlTemplate}" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="BorderThickness" Value="0 0 1 0" />
            </Trigger>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{StaticResource Theme.ToolBar.Normal.BorderBrush}"/>
        <Setter Property="MinWidth" Value="1"/>
        <Setter Property="MinHeight" Value="1"/>
        <Setter Property="Margin" Value="2 2 2 2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Margin" Value=" 0" />
        <Setter Property="Padding" Value="10 4"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource Theme.ToolBar.Normal.ForegroundBrush}" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="Bd"
                        CornerRadius="2"
                        SnapsToDevicePixels="True"
                        Padding="{TemplateBinding Padding}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                        <ContentPresenter
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Theme.ToolBarButton.MouseOver.BorderBrush}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Theme.ToolBarButton.MouseOver.BackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Theme.ToolBarButton.MouseOver.BorderBrush}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Theme.ToolBarButton.MouseOver.BackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Theme.ToolBarButton.Pressed.BorderBrush}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Theme.ToolBarButton.Pressed.BackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Margin" Value=" 0" />
        <Setter Property="Padding" Value="10 4"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource Theme.ToolBar.Normal.ForegroundBrush}" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        CornerRadius="2"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource Theme.ToolBarButton.MouseOver.BorderBrush}"/>
                            <Setter Property="Background" Value="{StaticResource Theme.ToolBarButton.Checked.BackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource Theme.ToolBarButton.MouseOver.BorderBrush}"/>
                            <Setter Property="Background" Value="{StaticResource Theme.ToolBarButton.MouseOver.BackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource Theme.ToolBarButton.MouseOver.BorderBrush}"/>
                            <Setter Property="Background" Value="{StaticResource Theme.ToolBarButton.MouseOver.BackgroundBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{StaticResource Theme.ToolBarButton.Pressed.BorderBrush}"/>
                            <Setter Property="Background" Value="{StaticResource Theme.ToolBarButton.Pressed.BackgroundBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{StaticResource Theme.ToolBarButton.Pressed.BorderBrush}"/>
                            <Setter Property="Background" Value="{StaticResource Theme.ToolBarButton.Pressed.BackgroundBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource Theme.ToolBarButton.Pressed.BorderBrush}"/>
                            <Setter Property="Background" Value="{StaticResource Theme.ToolBarButton.Pressed.BackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" />

    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" />

    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Padding" Value="4 2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Padding" Value="4 2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <!--#endregion ToolBar styles -->

    <!--#region List styles -->

    <Style x:Key="BoxItemBase" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="IsSelected" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource BoxItemBase}">
        <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ScrollContentPresenter}}}" />
    </Style>

    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{StaticResource Theme.ListBox.Normal.BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Theme.ListBox.Normal.BorderBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border
                        x:Name="Bd"
                        SnapsToDevicePixels="True"
                        Padding="0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Focusable="False" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Theme.ListBox.Disabled.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Theme.ListBox.Disabled.BorderBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource BoxItemBase}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ScrollContentPresenter}}}" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{StaticResource Theme.ListBoxItem.BorderBrush}"/>
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border
                        x:Name="Bd"
                        SnapsToDevicePixels="True"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Theme.ListBoxItem.MouseOver.BackgroundBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Theme.ListBoxItem.SelectedInactive.BackgroundBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Theme.ListBoxItem.SelectedActive.BackgroundBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--#endregion List styles  -->

    <!--#region TabControl styles -->

    <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{DynamicResource Theme.TabItem.Normal.ForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource Theme.TabItem.Normal.BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Theme.TabItem.Normal.BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border 
                        x:Name="border"
                        Padding="12 6"
                        BorderThickness="1 1 1 1"
                        Margin="0 0 -1 0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter
                            x:Name="content"
                            ContentSource="Header" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource Theme.TabItem.MouseOver.BackgroundBrush}" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="border" Property="BorderThickness" Value="1 1 1 0" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Theme.TabItem.Selected.BackgroundBrush}" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="content" Property="TextElement.Foreground" Value="{StaticResource Theme.TabItem.Selected.ForegroundBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="content" Property="TextElement.Foreground" Value="{StaticResource Theme.TabItem.Disabled.ForegroundBrush}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Theme.TabItem.Disabled.BackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="DefaultTabControlTemplate" TargetType="TabControl">
        <DockPanel Background="{TemplateBinding Background}">
            <Grid DockPanel.Dock="Top">
                <Border
                    BorderThickness="0 0 0 1"
                    Background="{StaticResource Theme.TabPanel.Normal.BackgroundBrush}"
                    BorderBrush="{TemplateBinding BorderBrush}" />

                <TabPanel
                    x:Name="HeaderPanel"
                    Margin="4 4 4 0"
                    IsItemsHost="True"
                    KeyboardNavigation.TabIndex="1"
                    Background="{x:Static Brushes.Transparent}" />
            </Grid>

            <Border
                Background="{TemplateBinding Background}"
                KeyboardNavigation.TabNavigation="Local"
                KeyboardNavigation.DirectionalNavigation="Contained"
                KeyboardNavigation.TabIndex="2">
                <ContentPresenter 
                    Margin="0"
                    x:Name="PART_SelectedContentHost" 
                    ContentSource="SelectedContent"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
            </Border>
        </DockPanel>
    </ControlTemplate>

    <Style x:Key="{x:Type TabControl}" TargetType="{x:Type TabControl}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="TabStripPlacement" Value="Top" />
        <Setter Property="Background" Value="{StaticResource Theme.TabControl.Normal.BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource Theme.TabControl.Normal.BorderBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{StaticResource DefaultTabControlTemplate}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Type TabItem}}" />
    </Style>

    <Style x:Key="HeaderlessTabControl" TargetType="{x:Type TabControl}" BasedOn="{StaticResource {x:Type TabControl}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="SelectedIndex" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <ContentPresenter
                                x:Name="PART_SelectedContentHost"
                                ContentSource="SelectedContent" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeftHeaderTabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="OverridesDefaultStyle" Value="False" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="TabStripPlacement" Value="Left" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{StaticResource Theme.TabControl.Normal.BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource Theme.TabControl.Normal.BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>

                            <Border
                                BorderThickness="0,0,1,0"
                                Background="{StaticResource Theme.TabPanel.Normal.BackgroundBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}" />

                            <TabPanel
                                x:Name="HeaderPanel"
                                Width="120"
                                IsItemsHost="True"
                                KeyboardNavigation.TabIndex="1" />

                            <ContentPresenter
                                Grid.Column="1"
                                x:Name="PART_SelectedContentHost" 
                                ContentSource="SelectedContent" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Padding" Value="14 8 8 8" />
                    <Setter Property="Background" Value="{x:Static Brushes.Transparent}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Border
                                    x:Name="border"
                                    Padding="{TemplateBinding Padding}"
                                    BorderThickness="0"
                                    Background="{TemplateBinding Background}">
                                    <ContentPresenter
                                        x:Name="tabHeader"
                                        ContentSource="Header"
                                        TextElement.Foreground="#FF444444"/>
                                </Border>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="border" Property="Background" Value="{StaticResource Theme.TabItem.MouseOver.BackgroundBrush}" />
                                    </Trigger>

                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="border" Property="Background" Value="{StaticResource Theme.TabItem.Selected.BackgroundBrush}" />
                                        <Setter TargetName="tabHeader" Property="TextElement.Foreground" Value="#FF222222" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion TabControl styles -->
</ResourceDictionary>
